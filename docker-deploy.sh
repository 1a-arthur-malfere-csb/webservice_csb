#!/bin/bash

# Script de d√©ploiement et test Docker pour l'API de chiffrement et hachage

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Configuration
IMAGE_NAME="crypto-api"
TAG="latest"
CONTAINER_NAME="crypto-api-test"
PORT="8080"
HEALTH_CHECK_URL="http://localhost:$PORT"

echo -e "${BLUE}üöÄ D√âPLOIEMENT DOCKER${NC}"
echo -e "${BLUE}===================${NC}"
echo ""

# Fonction d'aide
show_help() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  start       D√©marrer l'API en mode production"
    echo "  test        Dester l'API avec les tests complets"
    echo "  dev         D√©marrer en mode d√©veloppement"
    echo "  stop        Arr√™ter l'API"
    echo "  logs        Afficher les logs"
    echo "  shell       Ouvrir un shell dans le conteneur"
    echo "  clean       Nettoyer les conteneurs et images"
    echo "  status      Afficher le statut des conteneurs"
    echo ""
    echo "Options:"
    echo "  -p, --port PORT     Port √† utiliser (d√©faut: 8080)"
    echo "  -t, --tag TAG       Tag de l'image √† utiliser"
    echo "  -h, --help          Afficher cette aide"
}

# Fonction pour v√©rifier si Docker est disponible
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker n'est pas d√©marr√©${NC}"
        exit 1
    fi
}

# Fonction pour arr√™ter les conteneurs existants
stop_existing() {
    echo -e "${YELLOW}üõë Arr√™t des conteneurs existants...${NC}"
    
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        docker stop "$CONTAINER_NAME" > /dev/null
        docker rm "$CONTAINER_NAME" > /dev/null
        echo -e "${GREEN}‚úì Conteneur arr√™t√©${NC}"
    fi
}

# Fonction pour d√©marrer l'API
start_api() {
    echo -e "${BLUE}üöÄ D√©marrage de l'API...${NC}"
    
    # V√©rifier que l'image existe
    if ! docker images | grep -q "$IMAGE_NAME.*$TAG"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Image $IMAGE_NAME:$TAG non trouv√©e, construction...${NC}"
        ./docker-build.sh -t "$TAG"
    fi
    
    # D√©marrer le conteneur
    docker run -d \
        --name "$CONTAINER_NAME" \
        -p "$PORT:8080" \
        -e APP_ENV=production \
        -e APP_DEBUG=false \
        "$IMAGE_NAME:$TAG"
    
    echo -e "${GREEN}‚úì API d√©marr√©e sur le port $PORT${NC}"
    
    # Attendre que l'API soit pr√™te
    echo -e "${YELLOW}‚è≥ Attente du d√©marrage de l'API...${NC}"
    sleep 10
    
    # V√©rifier la sant√©
    if curl -f "$HEALTH_CHECK_URL/" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì API pr√™te et accessible${NC}"
    else
        echo -e "${RED}‚ùå API non accessible${NC}"
        docker logs "$CONTAINER_NAME"
        exit 1
    fi
}

# Fonction pour d√©marrer en mode d√©veloppement
start_dev() {
    echo -e "${BLUE}üîß D√©marrage en mode d√©veloppement...${NC}"
    
    # D√©marrer avec docker-compose
    docker-compose up -d
    
    echo -e "${GREEN}‚úì Services d√©marr√©s${NC}"
    echo -e "${BLUE}API disponible sur: http://localhost:8080${NC}"
    echo -e "${BLUE}Nginx disponible sur: http://localhost:80${NC}"
}

# Fonction pour tester l'API
test_api() {
    echo -e "${BLUE}üß™ Test de l'API...${NC}"
    
    # V√©rifier que l'API est accessible
    if ! curl -f "$HEALTH_CHECK_URL/" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå API non accessible sur $HEALTH_CHECK_URL${NC}"
        exit 1
    fi
    
    # Ex√©cuter les tests complets
    echo -e "${BLUE}Ex√©cution des tests complets...${NC}"
    BASE_URL="$HEALTH_CHECK_URL" ./test_complete.sh
    
    echo -e "${GREEN}‚úì Tests termin√©s${NC}"
}

# Fonction pour afficher les logs
show_logs() {
    echo -e "${BLUE}üìã Logs de l'API...${NC}"
    docker logs -f "$CONTAINER_NAME"
}

# Fonction pour ouvrir un shell
open_shell() {
    echo -e "${BLUE}üêö Ouverture d'un shell...${NC}"
    docker exec -it "$CONTAINER_NAME" /bin/sh
}

# Fonction pour arr√™ter l'API
stop_api() {
    echo -e "${BLUE}üõë Arr√™t de l'API...${NC}"
    
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        docker stop "$CONTAINER_NAME" > /dev/null
        docker rm "$CONTAINER_NAME" > /dev/null
        echo -e "${GREEN}‚úì API arr√™t√©e${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun conteneur API en cours d'ex√©cution${NC}"
    fi
    
    # Arr√™ter docker-compose si actif
    if docker-compose ps -q | grep -q .; then
        docker-compose down
        echo -e "${GREEN}‚úì Services docker-compose arr√™t√©s${NC}"
    fi
}

# Fonction pour nettoyer
clean_all() {
    echo -e "${BLUE}üßπ Nettoyage...${NC}"
    
    # Arr√™ter tous les conteneurs
    stop_api
    
    # Nettoyer les images inutiles
    docker image prune -f
    docker container prune -f
    docker volume prune -f
    
    echo -e "${GREEN}‚úì Nettoyage termin√©${NC}"
}

# Fonction pour afficher le statut
show_status() {
    echo -e "${BLUE}üìä Statut des conteneurs...${NC}"
    echo ""
    
    # Conteneurs en cours d'ex√©cution
    echo "Conteneurs actifs:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    echo ""
    
    # Images disponibles
    echo "Images disponibles:"
    docker images | grep "$IMAGE_NAME" || echo "Aucune image $IMAGE_NAME trouv√©e"
    echo ""
    
    # Utilisation des ressources
    echo "Utilisation des ressources:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "Aucun conteneur en cours d'ex√©cution"
}

# Parse des arguments
COMMAND=""
while [[ $# -gt 0 ]]; do
    case $1 in
        start|test|dev|stop|logs|shell|clean|status)
            COMMAND="$1"
            shift
            ;;
        -p|--port)
            PORT="$2"
            HEALTH_CHECK_URL="http://localhost:$PORT"
            shift 2
            ;;
        -t|--tag)
            TAG="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# V√©rifier Docker
check_docker

# Ex√©cuter la commande
case $COMMAND in
    start)
        stop_existing
        start_api
        echo -e "${GREEN}üéâ API d√©marr√©e avec succ√®s !${NC}"
        echo -e "${BLUE}URL: $HEALTH_CHECK_URL${NC}"
        ;;
    test)
        test_api
        ;;
    dev)
        start_dev
        ;;
    stop)
        stop_api
        ;;
    logs)
        show_logs
        ;;
    shell)
        open_shell
        ;;
    clean)
        clean_all
        ;;
    status)
        show_status
        ;;
    "")
        echo -e "${RED}‚ùå Aucune commande sp√©cifi√©e${NC}"
        show_help
        exit 1
        ;;
esac
