#!/bin/bash

# Script de test avanc√© pour les fonctionnalit√©s de chiffrement
# Microservice PHP Slim Framework

# Configuration
BASE_URL="http://localhost:8080"
API_URL="${BASE_URL}/api"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables pour stocker les r√©sultats
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Fonction pour afficher les r√©sultats
print_result() {
    local test_name="$1"
    local status="$2"
    local response="$3"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    if [ "$status" = "PASS" ]; then
        echo -e "${GREEN}‚úì${NC} $test_name"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "${RED}‚úó${NC} $test_name"
        echo -e "${RED}  Erreur: $response${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

# Fonction pour tester un endpoint
test_endpoint() {
    local method="$1"
    local url="$2"
    local data="$3"
    local test_name="$4"
    local expected_status="$5"
    
    if [ -n "$data" ]; then
        response=$(curl -s -w "\n%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$url")
    else
        response=$(curl -s -w "\n%{http_code}" -X "$method" "$url")
    fi
    
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" = "$expected_status" ]; then
        print_result "$test_name" "PASS" ""
    else
        print_result "$test_name" "FAIL" "HTTP $http_code - $body"
    fi
}

# Fonction pour tester avec v√©rification JSON
test_json_endpoint() {
    local method="$1"
    local url="$2"
    local data="$3"
    local test_name="$4"
    local expected_status="$5"
    local json_field="$6"
    
    if [ -n "$data" ]; then
        response=$(curl -s -w "\n%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$url")
    else
        response=$(curl -s -w "\n%{http_code}" -X "$method" "$url")
    fi
    
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" = "$expected_status" ]; then
        if [ -n "$json_field" ]; then
            if echo "$body" | jq -e ".$json_field" > /dev/null 2>&1; then
                print_result "$test_name" "PASS" ""
            else
                print_result "$test_name" "FAIL" "Champ JSON '$json_field' manquant"
            fi
        else
            print_result "$test_name" "PASS" ""
        fi
    else
        print_result "$test_name" "FAIL" "HTTP $http_code - $body"
    fi
}

# Fonction pour v√©rifier si le serveur est d√©marr√©
check_server() {
    echo -e "${BLUE}üîç V√©rification du serveur...${NC}"
    if curl -s "$BASE_URL" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì Serveur d√©marr√© sur $BASE_URL${NC}"
        return 0
    else
        echo -e "${RED}‚úó Serveur non accessible sur $BASE_URL${NC}"
        echo -e "${YELLOW}üí° D√©marrez le serveur avec: composer start${NC}"
        exit 1
    fi
}

# Fonction pour afficher le r√©sum√©
print_summary() {
    echo ""
    echo -e "${BLUE}üìä R√âSUM√â DES TESTS AVANC√âS${NC}"
    echo -e "${BLUE}============================${NC}"
    echo -e "Total: $TOTAL_TESTS"
    echo -e "${GREEN}Succ√®s: $PASSED_TESTS${NC}"
    echo -e "${RED}√âchecs: $FAILED_TESTS${NC}"
    
    if [ $FAILED_TESTS -eq 0 ]; then
        echo -e "${GREEN}üéâ Tous les tests avanc√©s sont pass√©s !${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå Certains tests avanc√©s ont √©chou√©${NC}"
        exit 1
    fi
}

# Fonction principale
main() {
    echo -e "${BLUE}üöÄ TEST AVANC√â DES FONCTIONNALIT√âS DE CHIFFREMENT${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
    
    # V√©rifier si le serveur est d√©marr√©
    check_server
    echo ""
    
    # V√©rifier si jq est install√©
    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  jq n'est pas install√©. Installation recommand√©e pour de meilleurs tests.${NC}"
        echo -e "${YELLOW}   Installation: sudo apt-get install jq (Ubuntu/Debian)${NC}"
        echo ""
    fi
    
    echo -e "${BLUE}üß™ D√âBUT DES TESTS AVANC√âS${NC}"
    echo -e "${BLUE}===========================${NC}"
    echo ""
    
    # Tests des fonctionnalit√©s de chiffrement avanc√©es
    echo -e "${YELLOW}üîê Tests de chiffrement Argon2${NC}"
    
    # Test chiffrement Argon2
    test_json_endpoint "POST" "$API_URL/encrypt-argon2" \
        '{"data": "Donn√©es sensibles", "password": "mon_mot_de_passe", "options": {"memory_cost": 65536, "time_cost": 4, "threads": 3}}' \
        "Chiffrement Argon2" "200" "encrypted_data"
    
    # Test d√©chiffrement Argon2
    argon2_response=$(curl -s -X POST -H "Content-Type: application/json" \
        -d '{"data": "Donn√©es sensibles", "password": "mon_mot_de_passe"}' \
        "$API_URL/encrypt-argon2")
    
    if echo "$argon2_response" | jq -e '.encrypted_data' > /dev/null 2>&1; then
        encrypted_data=$(echo "$argon2_response" | jq -r '.encrypted_data')
        salt=$(echo "$argon2_response" | jq -r '.salt')
        iv=$(echo "$argon2_response" | jq -r '.iv')
        tag=$(echo "$argon2_response" | jq -r '.tag')
        
        test_json_endpoint "POST" "$API_URL/decrypt-argon2" \
            "{\"encrypted_data\": \"$encrypted_data\", \"password\": \"mon_mot_de_passe\", \"salt\": \"$salt\", \"iv\": \"$iv\", \"tag\": \"$tag\"}" \
            "D√©chiffrement Argon2" "200" "data"
    else
        print_result "D√©chiffrement Argon2" "FAIL" "Impossible de r√©cup√©rer les donn√©es chiffr√©es"
    fi
    echo ""
    
    # Tests de chiffrement hybride RSA + AES
    echo -e "${YELLOW}üîí Tests de chiffrement hybride RSA + AES${NC}"
    
    # G√©n√©ration de paire de cl√©s RSA
    test_json_endpoint "GET" "$API_URL/generate-rsa-keypair?key_size=2048" "" "G√©n√©ration de paire de cl√©s RSA" "200" "private_key"
    
    # Test chiffrement hybride
    rsa_response=$(curl -s -X GET "$API_URL/generate-rsa-keypair?key_size=2048")
    
    if echo "$rsa_response" | jq -e '.public_key' > /dev/null 2>&1; then
        public_key=$(echo "$rsa_response" | jq -r '.public_key')
        private_key=$(echo "$rsa_response" | jq -r '.private_key')
        
        test_json_endpoint "POST" "$API_URL/encrypt-hybrid" \
            "{\"data\": \"Donn√©es sensibles\", \"public_key\": \"$public_key\"}" \
            "Chiffrement hybride RSA + AES" "200" "encrypted_data"
        
        # Test d√©chiffrement hybride
        hybrid_response=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"data\": \"Donn√©es sensibles\", \"public_key\": \"$public_key\"}" \
            "$API_URL/encrypt-hybrid")
        
        if echo "$hybrid_response" | jq -e '.encrypted_data' > /dev/null 2>&1; then
            encrypted_data=$(echo "$hybrid_response" | jq -r '.encrypted_data')
            encrypted_key=$(echo "$hybrid_response" | jq -r '.encrypted_key')
            iv=$(echo "$hybrid_response" | jq -r '.iv')
            tag=$(echo "$hybrid_response" | jq -r '.tag')
            
            test_json_endpoint "POST" "$API_URL/decrypt-hybrid" \
                "{\"encrypted_data\": \"$encrypted_data\", \"encrypted_key\": \"$encrypted_key\", \"iv\": \"$iv\", \"tag\": \"$tag\", \"private_key\": \"$private_key\"}" \
                "D√©chiffrement hybride RSA + AES" "200" "data"
        else
            print_result "D√©chiffrement hybride RSA + AES" "FAIL" "Impossible de r√©cup√©rer les donn√©es chiffr√©es"
        fi
    else
        print_result "Chiffrement hybride RSA + AES" "FAIL" "Impossible de g√©n√©rer les cl√©s RSA"
    fi
    echo ""
    
    # Tests de performance et s√©curit√©
    echo -e "${YELLOW}‚ö° Tests de performance et s√©curit√©${NC}"
    
    # Test avec diff√©rentes tailles de donn√©es
    test_json_endpoint "POST" "$API_URL/encrypt" \
        '{"data": "Petites donn√©es", "password": "test"}' \
        "Chiffrement de petites donn√©es" "200" "encrypted_data"
    
    # Test avec donn√©es moyennes
    medium_data=$(printf 'a%.0s' {1..1000})
    test_json_endpoint "POST" "$API_URL/encrypt" \
        "{\"data\": \"$medium_data\", \"password\": \"test\"}" \
        "Chiffrement de donn√©es moyennes" "200" "encrypted_data"
    
    # Test avec options personnalis√©es
    test_json_endpoint "POST" "$API_URL/encrypt-argon2" \
        '{"data": "Donn√©es avec options", "password": "test", "options": {"memory_cost": 32768, "time_cost": 2, "threads": 2}}' \
        "Chiffrement Argon2 avec options personnalis√©es" "200" "encrypted_data"
    echo ""
    
    # Tests d'erreurs avanc√©s
    echo -e "${YELLOW}‚ùå Tests de gestion d'erreurs avanc√©s${NC}"
    
    # Test avec cl√© RSA invalide
    test_endpoint "POST" "$API_URL/encrypt-hybrid" \
        '{"data": "test", "public_key": "cl√©_invalide"}' \
        "Chiffrement hybride avec cl√© RSA invalide" "400"
    
    # Test avec param√®tres manquants pour Argon2
    test_endpoint "POST" "$API_URL/encrypt-argon2" \
        '{"data": "test"}' \
        "Chiffrement Argon2 sans mot de passe" "400"
    
    # Test avec param√®tres manquants pour d√©chiffrement hybride
    test_endpoint "POST" "$API_URL/decrypt-hybrid" \
        '{"encrypted_data": "test"}' \
        "D√©chiffrement hybride sans param√®tres" "400"
    
    # Test avec taille de cl√© RSA invalide
    test_endpoint "GET" "$API_URL/generate-rsa-keypair?key_size=512" "" "G√©n√©ration de cl√© RSA avec taille invalide" "400"
    
    echo ""
    
    # Afficher le r√©sum√©
    print_summary
}

# Ex√©cuter le script principal
main "$@"
