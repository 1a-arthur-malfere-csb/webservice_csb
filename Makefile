.PHONY: help build test start stop clean logs shell status dev

# Configuration par d√©faut
IMAGE_NAME = crypto-api
TAG = latest
PORT = 8080
CONTAINER_NAME = crypto-api

# Couleurs
GREEN = \033[0;32m
BLUE = \033[0;34m
YELLOW = \033[1;33m
NC = \033[0m

# Aide par d√©faut
help: ## Afficher cette aide
	@echo "$(BLUE)üöÄ API de Chiffrement et Hachage - Commandes disponibles$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Exemples:$(NC)"
	@echo "  make build          # Construire l'image Docker"
	@echo "  make start          # D√©marrer l'API"
	@echo "  make test           # Tester l'API"
	@echo "  make dev            # Mode d√©veloppement avec docker-compose"

# Construction de l'image Docker
build: ## Construire l'image Docker optimis√©e
	@echo "$(BLUE)üî® Construction de l'image Docker...$(NC)"
	@./docker-build.sh -t $(TAG)
	@echo "$(GREEN)‚úì Image construite avec succ√®s$(NC)"

# Test de l'image
test-image: ## Tester l'image Docker
	@echo "$(BLUE)üß™ Test de l'image Docker...$(NC)"
	@./docker-build.sh -t $(TAG) -c

# D√©marrage de l'API
start: ## D√©marrer l'API en mode production
	@echo "$(BLUE)üöÄ D√©marrage de l'API...$(NC)"
	@./docker-deploy.sh start -p $(PORT) -t $(TAG)
	@echo "$(GREEN)‚úì API d√©marr√©e sur le port $(PORT)$(NC)"

# Test de l'API
test: ## Tester l'API avec les tests complets
	@echo "$(BLUE)üß™ Test de l'API...$(NC)"
	@./docker-deploy.sh test -p $(PORT)

# Mode d√©veloppement
dev: ## D√©marrer en mode d√©veloppement avec docker-compose
	@echo "$(BLUE)üîß Mode d√©veloppement...$(NC)"
	@./docker-deploy.sh dev
	@echo "$(GREEN)‚úì Services d√©marr√©s$(NC)"

# Arr√™t de l'API
stop: ## Arr√™ter l'API
	@echo "$(BLUE)üõë Arr√™t de l'API...$(NC)"
	@./docker-deploy.sh stop
	@echo "$(GREEN)‚úì API arr√™t√©e$(NC)"

# Affichage des logs
logs: ## Afficher les logs de l'API
	@./docker-deploy.sh logs

# Shell dans le conteneur
shell: ## Ouvrir un shell dans le conteneur
	@./docker-deploy.sh shell

# Statut des conteneurs
status: ## Afficher le statut des conteneurs
	@./docker-deploy.sh status

# Nettoyage
clean: ## Nettoyer les conteneurs et images
	@echo "$(BLUE)üßπ Nettoyage...$(NC)"
	@./docker-deploy.sh clean
	@echo "$(GREEN)‚úì Nettoyage termin√©$(NC)"

# Nettoyage complet
clean-all: clean ## Nettoyage complet (conteneurs, images, volumes)
	@echo "$(BLUE)üßπ Nettoyage complet...$(NC)"
	@docker system prune -af
	@echo "$(GREEN)‚úì Nettoyage complet termin√©$(NC)"

# Build et test complet
build-test: build test-image ## Construire et tester l'image
	@echo "$(GREEN)‚úì Build et test termin√©s$(NC)"

# D√©ploiement complet
deploy: build start test ## D√©ploiement complet (build + start + test)
	@echo "$(GREEN)üéâ D√©ploiement complet termin√© !$(NC)"

# Red√©marrage
restart: stop start ## Red√©marrer l'API
	@echo "$(GREEN)‚úì API red√©marr√©e$(NC)"

# Mise √† jour
update: stop build start ## Mettre √† jour l'API (stop + build + start)
	@echo "$(GREEN)‚úì API mise √† jour$(NC)"

# Test de performance
perf: ## Test de performance de l'API
	@echo "$(BLUE)‚ö° Test de performance...$(NC)"
	@if ! command -v ab &> /dev/null; then \
		echo "$(YELLOW)‚ö†Ô∏è  Apache Bench (ab) non install√©, installation...$(NC)"; \
		sudo apt-get update && sudo apt-get install -y apache2-utils; \
	fi
	@ab -n 1000 -c 10 http://localhost:$(PORT)/
	@echo "$(GREEN)‚úì Test de performance termin√©$(NC)"

# Analyse de l'image
analyze: ## Analyser la taille et les couches de l'image
	@echo "$(BLUE)üìä Analyse de l'image...$(NC)"
	@docker images $(IMAGE_NAME):$(TAG) --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
	@echo ""
	@echo "Couches de l'image:"
	@docker history $(IMAGE_NAME):$(TAG) --format "table {{.CreatedBy}}\t{{.Size}}" --no-trunc

# Push vers registry
push: ## Pousser l'image vers un registry
	@echo "$(BLUE)üì§ Push de l'image...$(NC)"
	@./docker-build.sh -t $(TAG) -p
	@echo "$(GREEN)‚úì Image pouss√©e$(NC)"

# Installation des d√©pendances
install: ## Installer les d√©pendances PHP
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	@composer install --optimize-autoloader
	@echo "$(GREEN)‚úì D√©pendances install√©es$(NC)"

# Tests unitaires
test-unit: ## Ex√©cuter les tests unitaires
	@echo "$(BLUE)üß™ Tests unitaires...$(NC)"
	@composer test
	@echo "$(GREEN)‚úì Tests unitaires termin√©s$(NC)"

# Linting
lint: ## Ex√©cuter le linting du code
	@echo "$(BLUE)üîç Linting du code...$(NC)"
	@composer run-script phpcs
	@echo "$(GREEN)‚úì Linting termin√©$(NC)"

# Fix du code
fix: ## Corriger automatiquement le code
	@echo "$(BLUE)üîß Correction du code...$(NC)"
	@composer run-script phpcbf
	@echo "$(GREEN)‚úì Code corrig√©$(NC)"

# Documentation
docs: ## G√©n√©rer la documentation
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	@echo "$(GREEN)‚úì Documentation disponible dans les fichiers .md$(NC)"

# Informations sur l'environnement
info: ## Afficher les informations sur l'environnement
	@echo "$(BLUE)‚ÑπÔ∏è  Informations sur l'environnement$(NC)"
	@echo "Docker version: $$(docker --version)"
	@echo "Docker Compose version: $$(docker-compose --version)"
	@echo "PHP version: $$(php --version | head -n1)"
	@echo "Composer version: $$(composer --version)"
	@echo "Image: $(IMAGE_NAME):$(TAG)"
	@echo "Port: $(PORT)"

# Par d√©faut
.DEFAULT_GOAL := help
