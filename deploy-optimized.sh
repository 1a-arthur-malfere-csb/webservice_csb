#!/bin/bash

# Script de d√©ploiement optimis√© pour l'API de chiffrement et hachage

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${BLUE}üöÄ D√âPLOIEMENT OPTIMIS√â - API DE CHIFFREMENT ET HACHAGE${NC}"
echo -e "${BLUE}====================================================${NC}"
echo ""

# Configuration
IMAGE_NAME="crypto-api"
TAG="latest"
CONTAINER_NAME="crypto-api-optimized"
PORT="8080"

# Fonction d'aide
show_help() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  full        D√©ploiement complet (nettoyage + build + test + start)"
    echo "  build       Construction de l'image optimis√©e"
    echo "  start       D√©marrage de l'API"
    echo "  test        Test de l'API"
    echo "  stop        Arr√™t de l'API"
    echo "  clean       Nettoyage complet"
    echo "  status      Statut des services"
    echo ""
    echo "Options:"
    echo "  -t, --tag TAG       Tag de l'image (d√©faut: latest)"
    echo "  -p, --port PORT     Port √† utiliser (d√©faut: 8080)"
    echo "  -h, --help          Afficher cette aide"
}

# Fonction de nettoyage
clean_project() {
    echo -e "${YELLOW}üßπ Nettoyage du projet...${NC}"
    ./cleanup.sh
    echo -e "${GREEN}‚úì Projet nettoy√©${NC}"
}

# Fonction de construction
build_image() {
    echo -e "${BLUE}üî® Construction de l'image optimis√©e...${NC}"
    make build
    echo -e "${GREEN}‚úì Image construite${NC}"
}

# Fonction de test
test_api() {
    echo -e "${BLUE}üß™ Test de l'API...${NC}"
    make test
    echo -e "${GREEN}‚úì Tests termin√©s${NC}"
}

# Fonction de d√©marrage
start_api() {
    echo -e "${BLUE}üöÄ D√©marrage de l'API...${NC}"
    make start
    echo -e "${GREEN}‚úì API d√©marr√©e${NC}"
}

# Fonction d'arr√™t
stop_api() {
    echo -e "${BLUE}üõë Arr√™t de l'API...${NC}"
    make stop
    echo -e "${GREEN}‚úì API arr√™t√©e${NC}"
}

# Fonction de statut
show_status() {
    echo -e "${BLUE}üìä Statut des services...${NC}"
    make status
}

# Fonction de nettoyage complet
clean_all() {
    echo -e "${BLUE}üßπ Nettoyage complet...${NC}"
    make clean-all
    echo -e "${GREEN}‚úì Nettoyage complet termin√©${NC}"
}

# Fonction de d√©ploiement complet
deploy_full() {
    echo -e "${PURPLE}üöÄ D√âPLOIEMENT COMPLET${NC}"
    echo -e "${PURPLE}====================${NC}"
    echo ""
    
    # 1. Nettoyage
    echo -e "${YELLOW}√âtape 1/5: Nettoyage du projet${NC}"
    clean_project
    echo ""
    
    # 2. Construction
    echo -e "${YELLOW}√âtape 2/5: Construction de l'image${NC}"
    build_image
    echo ""
    
    # 3. Test
    echo -e "${YELLOW}√âtape 3/5: Test de l'image${NC}"
    test_api
    echo ""
    
    # 4. D√©marrage
    echo -e "${YELLOW}√âtape 4/5: D√©marrage de l'API${NC}"
    start_api
    echo ""
    
    # 5. V√©rification
    echo -e "${YELLOW}√âtape 5/5: V√©rification finale${NC}"
    show_status
    echo ""
    
    echo -e "${GREEN}üéâ D√âPLOIEMENT COMPLET TERMIN√â !${NC}"
    echo -e "${GREEN}API disponible sur: http://localhost:${PORT}${NC}"
    echo ""
    echo -e "${BLUE}Commandes utiles:${NC}"
    echo "  make logs     # Voir les logs"
    echo "  make shell    # Shell dans le conteneur"
    echo "  make stop     # Arr√™ter l'API"
    echo "  make test     # Tester l'API"
}

# Parse des arguments
COMMAND=""
while [[ $# -gt 0 ]]; do
    case $1 in
        full|build|start|test|stop|clean|status)
            COMMAND="$1"
            shift
            ;;
        -t|--tag)
            TAG="$2"
            shift 2
            ;;
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Ex√©cuter la commande
case $COMMAND in
    full)
        deploy_full
        ;;
    build)
        build_image
        ;;
    start)
        start_api
        ;;
    test)
        test_api
        ;;
    stop)
        stop_api
        ;;
    clean)
        clean_all
        ;;
    status)
        show_status
        ;;
    "")
        echo -e "${RED}‚ùå Aucune commande sp√©cifi√©e${NC}"
        show_help
        exit 1
        ;;
esac
